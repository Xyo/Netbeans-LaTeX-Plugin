/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.NeTex.Outline.Window;

import java.io.IOException;
//import javax.swing.JComponent;
import org.NeTex.Outline.Parser.ElementBean;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
//import java.util.Collection;
import javax.swing.JComponent;
import javax.swing.JLabel;
import org.NeTex.Outline.Parser.TexFile;
import org.NeTex.Outline.Parser.TexFileParser;
import org.NeTex.Outline.Window.Bundle;
import org.netbeans.spi.navigator.NavigatorPanel;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.util.Lookup;
//import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
//import org.openide.util.RequestProcessor;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.NeTex.Outline.UI//NavigationWindow//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "NavigationWindowTopComponent",
        iconBase = "org/NeTex/Outline/UI/outlineIcon.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "navigator", openAtStartup = true)
@ActionID(category = "Window", id = "org.NeTex.Outline.UI.NavigationWindowTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_NavigationWindowAction",
        preferredID = "NavigationWindowTopComponent"
)
@Messages({
    "CTL_NavigationWindowAction=NavigationWindow",
    "CTL_NavigationWindowTopComponent=NavigationWindow Window",
    "HINT_NavigationWindowTopComponent=This is a NavigationWindow window"
})
public final class NavigationWindowTopComponent extends TopComponent implements NavigatorPanel, ExplorerManager.Provider {
    
    private static final Lookup.Template elementData = new Lookup.Template(ElementBean.class);
     /** current context to work on */
    private Lookup.Result currentContext;
    /** listener to context changes */
    private LookupListener contextListener;
    //private static final RequestProcessor threadRequest = new RequestProcessor(NavigationWindowTopComponent.class);
    //private volatile RequestProcessor.Task last;
    private final ExplorerManager manager = new ExplorerManager();
    private ElementNode root = new ElementNode();
    
    public NavigationWindowTopComponent() {
        initComponents();
        setName(Bundle.CTL_NavigationWindowTopComponent());
        setToolTipText(Bundle.HINT_NavigationWindowTopComponent());
        manager.setRootContext(root);

        setDisplayName("Example");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new BeanTreeView();

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(NavigationWindowTopComponent.class, "NavigationWindowTopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(jButton1)
                .addContainerGap(178, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            TexFileParser parser = new TexFileParser(new TexFile("example.tex"));
            ElementNode newRoot = parser.beginParse();
            if( newRoot != null ) this.root = newRoot;
            this.repaint();
       }catch(IOException e){
           // can't do much
       }
    }//GEN-LAST:event_jButton1ActionPerformed
// TODO: listen for 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public String getDisplayHint() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public JComponent getComponent() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void panelActivated(Lookup lkp) {
        // listen to changes on lookup context
//        currentContext = lkp.lookup(elementData);
//        currentContext.addLookupListener(getContextListener());
//        // get the data
//        Collection data = currentContext.allInstances();
//        setDataContent(data);
    }

    @Override
    public void panelDeactivated() {
//        currentContext.removeLookupListener(getContextListener());
//        currentContext = null;
    }
    
    
    // TODO: have processing done at a different stage - when file is opened (-> editor)
    /*
     last = threadRequest.post(runnable, 0);
        threadRequest.post(runnable, 0);

        // wait until process is done
        last.waitFinished();
        */
    
//    private LookupListener getContextListener () {
//        if (contextListener == null) {
//            contextListener = new ContextListener();
//        }
//        return contextListener;
//    }

    // I WOULD LIKE TO SPEAK TO YOUR MANAGER  
    @Override
    public ExplorerManager getExplorerManager() {
       return manager;
    }
      
//    private class ContextListener implements LookupListener {
//        
//        @Override
//        public void resultChanged(LookupEvent ev) {
//            Collection data = ((Lookup.Result)ev.getSource()).allInstances();
//            
//        }
//        
//    }
}
