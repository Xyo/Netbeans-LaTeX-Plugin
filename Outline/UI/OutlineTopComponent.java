/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.NeTex.Outline.UI;

import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import javax.swing.ActionMap;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.NeTex.Outline.UI//Outline//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "OutlineTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "org.NeTex.Outline.UI.OutlineTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_OutlineAction",
        preferredID = "OutlineTopComponent"
)
@Messages({
    "CTL_OutlineAction=Outline",
    "CTL_OutlineTopComponent=Outline Window",
    "HINT_OutlineTopComponent=This is a Outline window"
})
public final class OutlineTopComponent extends TopComponent implements ExplorerManager.Provider {
    
    private final ExplorerManager manager = new ExplorerManager();
    
    public OutlineTopComponent() {
        initComponents();
        setName(Bundle.CTL_OutlineTopComponent());
        setToolTipText(Bundle.HINT_OutlineTopComponent());
        associateLookup(ExplorerUtils.createLookup(manager, getActionMap()));
        // create and set root
        manager.setRootContext( new ElementNode());
        // TODO: change to display name of document parsed
        manager.getRootContext().setDisplayName("Latex Document"); 
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new BeanTreeView();

        setLayout(new java.awt.BorderLayout());
        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
     @Override
    public ExplorerManager getExplorerManager() {
        return manager;
    }
    
    
    /*
    
    @Override
    // switch all listeners on when component is shown
    protected void componentActivated() {
        ExplorerUtils.activateActions(manager, true);
    }
    
    @Override
    // switch all listeners off when component is hidden
    protected void componentDeactivated() {
        ExplorerUtils.activateActions(manager, false);
    }
    
 
    */

  
}
